
******************************************Design Decision*******************************************************************
**Task: Tuple**
The Tuple class represents a collection of values that can be of different types and lets you access these values.
The TupleDesc class describes the structure of a tuple, making sure the names and types of fields are consistent. 
It also provides functions to check if a tuple matches the structure, find the position of fields, and convert between tuples and byte arrays for storage. 

**Task:DbFile**
The design of the DbFile class focuses on providing a platform-independent interface for managing database files. 
The constructor initializes the file and calculates the number of pages based on the file size, enhancing usability. 
Methods for reading and writing pages log the operations, which can help in debugging or performance analysis. 

**Task:HeapFile **
In designing the HeapFile class,The insertion method first checks each page for available space, ensuring that tuples are only added where there's capacity.
If all pages are full, a new page is created, which helps maintain performance during insertions.
For deletion, We focused on accurately tracking the state of each slot, throwing exceptions for invalid operations to enhance reliability.
The methods for accessing tuples and iterating through the file were crafted to handle edge cases gracefully, ensuring that users can seamlessly navigate through the data.
Overall, the design emphasizes robustness, efficiency, and user-friendly data handling.
**Task:HeapPage **

In designing the HeapPage class,the constructor calculates the page's capacity based on the size of the tuples, ensuring efficient use of memory.
 By pointing the header to the beginning of the page and placing the data section at the end, We streamline data access. 
The insertTuple method was implemented to find empty slots efficiently, using bit manipulation to mark occupied slots, which keeps operations fast. 
For deleting tuples, We included checks to prevent modifying already empty slots, ensuring robustness. 
The methods for retrieving tuples and iterating through slots were designed to handle edge cases gracefully, maintaining both integrity and usability.
 Overall, these decisions prioritize efficient memory management while ensuring reliable data operations.
*************************************************************************************************************
Describe any missing or incomplete elements of your code.


*************************************************************************************************************


Answer the analytical questions.


*************************************************************************************************************


Describe how long you spent on the assignment, and whether there was anything you found particularly difficult or confusing.
We spent about 2 weeks 

*************************************************************************************************************


If you collaborate with someone else, you have to describe how you split the workload.

I collaborated with my classmate Zainab Alhaddad,We discussed the approaches for all the four tasks.
Zainab worked and finalized the code on “Tuple.cpp” and “DbFile.cpp” and I worked and finalized the code on “HeapFile.cpp” and “HeapPage.cpp”.
*************************************************************************************************************



